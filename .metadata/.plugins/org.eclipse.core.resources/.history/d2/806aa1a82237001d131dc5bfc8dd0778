package com.example.tuan3.jwt.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

import com.example.tuan3.jwt.services.UserDetailsServiceImpl;

@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

	@Autowired
	UserDetailsServiceImpl userDetailsservices;

	@Autowired
	private AuthEntryPointJwt unauthorizedHandler;

	@Bean
	public AuthTokenFilter euthenticationIwtTokenFilter() {
		return new AuthTokenFilter();
	}

@Override
public void configure(AuthenticationManagerBuilder authenticationttanagerBuilder) throws Exception {
	authenticationttanagerBuilder.userDetailsService(userDetailsservices).passwordEncoder(passwordEncoder());
}

@Bean
@Override
public AuthenticationManager authenticationMnagerBean() throws Exception (
return super. authenticationManagerBean();
y

ean

public Passwordincoder passwordEncoder() {
return new 8CryptPasswordéncoder();

»

>

@verride
protected void configure(tittpSecurity http) throws Exception {
hnttp.cors() .and() .csr#() disable)

‘except ionHtand] ing() .authent icat ionntryPoint (unauthorizedHandler) _and()
-sessionManagenent().sessionCreationPol icy (SessionCreationPolicy.STATELESS) .and()
sauthorizeRequests() -antHatchers("/api/auth/**").permital1()
‘antHlatchers("/api/test/**") .permitall()
canyRequest() .authenticated();

http.addFilterBefore(authenticationIwtTokenFilter(), UsernamePasswordauthenticationFilter.class);
