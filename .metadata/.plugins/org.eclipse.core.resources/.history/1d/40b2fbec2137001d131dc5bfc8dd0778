package com.example.tuan3.jwt.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;

import com.example.tuan3.jwt.services.UserDetailsServiceImpl;

@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class WebSecurityConfig extends WebSecurityConfigureradapter {

@Autowired
UserDetailsServiceImpl userDeteilsservices;

@Autowired
private AuthEntryPointJwt unauthorizediandler;

Geen

public AuthTokenFilter euthenticationIwtTokenFilter() {
return new AuthTokenFilter();

+

> BOverride
public void configure(AuthenticationtlanagerBuilder authenticationttanagerBuilder) throws Exception {
authenticationtlenagerBui lder .userDetailsService(userDetaillsService) .passwordéncoder (passwordéncoder())
y

» Bean
Override
public Authenticationttanager authenticationtanagerBean() throws Exception (
return super. authenticationManagerBean();
y

ean

public Passwordincoder passwordEncoder() {
return new 8CryptPasswordéncoder();

»

> @verride
protected void configure(tittpSecurity http) throws Exception {
hnttp.cors() .and() .csr#() disable)

‘except ionHtand] ing() .authent icat ionntryPoint (unauthorizedHandler) _and()
-sessionManagenent().sessionCreationPol icy (SessionCreationPolicy.STATELESS) .and()
sauthorizeRequests() -antHatchers("/api/auth/**").permital1()
‘antHlatchers("/api/test/**") .permitall()
canyRequest() .authenticated();

http.addFilterBefore(authenticationIwtTokenFilter(), UsernamePasswordauthenticationFilter.class);

 

